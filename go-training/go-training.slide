The Go Programming Language
A modern systems language
20:17 11 Feb 2015

Pieter Droogendijk
Developer, CRI
pieter@binky.org.uk
https://github.com/PieterD


* Language history & overview

* A little bit of history

Started in 2007 as a 20% project at Google:

- Ken Thompson (B, Unix, Plan 9, Regular Expressions, Ed, UTF-8)
- Rob Pike (Plan 9, Acme, Blit, Sam, UTF-8)
- Robert Griesemer

Joined in 2008:

- Ian Lance Taylor (Binutils, GCC)
- Russ Cox (Plan 9)

Open Sourced in November 10, 2009

- Andrew Gerrand
- Brad Fitzpatrick (Livejournal, memcached, OpenID, Camlistore)

Go 1.0 in March 2012


* Why Go exists

The computing landscape has changed. Multicore CPUs and concurrency models, grid computing, ubiquitous networking, and even the web.

The big languages, Java, C, C++, Python and Perl, are old and were not designed with these things in mind.

Pain points:

- Slow builds
- Runaway dependencies
- Errors are special
- Each programmer has their own "style", and all others are the devil's work
- Each programmer uses a different subset of the language
- Concurrency feels like an uphill battle, or is outright impossible
- Breaking compatibility between versions

* Simplicity is fundamental

.image images/blow_it_up.jpg

Simplicity cannot be added later, nor can it be gained by taking things away.
The way to gain simplicity is to have never added them in the first place.

* Features (buzz-word bingo)

- Procedural
- Compiled
- Very simple type system, strong & static
- Object Oriented, in the most basic sense
- Garbage collected
- Concurrent
- Memory-safe
- Simple build system
- Built-in testing
- Compiles very fast
- Full run-time reflection
- Exceptions, kind of


* Not Features (buzz-word bingo 2: electric boogaloo)

- Generics / Type Parameters / Parametric polymorphism
- Operator overloading
- Function / Method overloading
- Inheritance
- Pointer arithmetic


* Where it's being used

- Google (App Engine, Kubernetes, download server)
- DotCloud (Docker, Packer)
- Heroku (Doozer)
- CoreOS (Etcd, Raft)
- Bol.com, Iron.io, Bit.ly, Canonical, CloudFlare, Dropbox, Getty, Github, pool.ntp.org, Tumblr, Soundcloud, Twitch, Zynga Apcera, MongoDB, Wercker, Github Large File Storage

https://github.com/golang/go/wiki/GoUsers


* So what's it for?

What it does well:

- Paas & Iaas
- Servers
- Tools
- Web
- Big software

What it doesn't do so well:

- Scientific programming
- Real-time programming
- Operating systems
- Graphical user interface


* Hello world, and the development environment

* Hello, world!

.play hello_world/hello.go
.code reverse/reverse.go

* The workspace, GOROOT & GOPATH

Global configuration:

  export GOROOT=$HOME/go
  export GOPATH=$HOME/git/go
  export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

Get example project:

  go get github.com/PieterD/slides/go-training/hello_world

Directory structure:

  src/
    github.com/PieterD/slides/go-training/hello_world/
      hello.go
    github.com/PieterD/slides/go-training/reverse/
      reverse.go
  bin/
    hello_world
  pkg/
    darwin_amd64/github.com/PieterD/slides/go-training/hello-world
      reverse.a

* The go tool

Fetch, compile and install a program or library recursively

  go get <url>

Build a project

  go build

Run all tests

  go test

Lint-like static code analysis

  go vet

Format code into the standard shape

  go fmt

* And more go tool

Run all code generation

  go generate

Automated code manipulation

  go fix

Available tools

  go tool

Help on the go tool

  go help

Code coverage report

  go test -coverprofile=something.cover && go tool cover -html=something.cover


* The Type System


* Variable declaration

Available built-in primitive types

  int, uint, uintptr
  int8, int16, int32, int64
  uint8, uint16, uint32, uint64
  float32, float64, complex64, complex128
  byte, rune, string
  bool
  error

Declaration & initialization

  var zero int64
  var a int = 5
  var b, c int = 6, 7
  var d = 8
  e := 9
  var f, g, h = 0.5, 3, "hello"

* Constants

Numerical constants

  const (
    number1 = 91532623671
    number2 = 0xBadFaceDeadBeef
    number3 = 0755
    float1  = 111.56135161351
    float2  = 6.0221413e+23
    cmplx   = 111.222+999.888i
    str1    = "Hello, world!"
    str2    = `Hello, "world".`
    rune1   = '♬'
  )

Reducing to concrete types

  var iGood int        = 9
  var iBad  int        = 9 + 0.5
  var fGood float64    = 9 + 0.5
  var fBad  float64    = 9 + 0.5 + 0.2i
  var cGood complex128 = 9 + 0.5 + 0.2i

* Conversions

Convert constants if you need to

  i := int32(99)

Numeric types convert to each other

  i8 := byte(i)
  f := float64(i8)
  i = int32(f)

Conversions to and from strings

  s := "hello"
  b := []byte(s)
  s = string(b)
  r := []rune('一', '二', '三')
  s = string(r)      // "一二三"
  s = string(0x266c) // "♬"
  s = string('Σ')    // "Σ"

* More interesting types

Variable declaration & initialization

  var number    int          = 9
  var pointer1  *int         = &number
  var pointer2  *int         = new(int)
  var array     [5]int       = [5]int{1,2,3,4,5}
  var slice     []int        = make([]int, 10)
  var hashtable map[int]bool = make(map[int]bool)
  var channel   chan int     = make(chan int)

Function variable and closure

  var function  func(rune, string) bool = func(i rune, s string) bool {
    if string(r) == s {
      return true
    }
    return false
  }

More complicated type signatures read from left to right

  var complicated [15]*chan map[string] []func(int) string

* Type declarations and methods

Simple declarations

  type MyBool  bool
  type MySlice []int
  type MyHash  [32]byte
  type MyFunc  func(int, string) bool

Methods

  func (b MyBool) String() string {
     return fmt.Sprintf("%t", b)
  }

  func (b *MyBool) Set(set bool) (old bool) {
    old = *b
    *b = set
    return
  }

Calling methods

  b.Set(true) // Doesn't matter if b is MyBool or *MyBool

* Structs

Declaring a struct type

  type MyStruct struct {
    Name string
    Age  int
    Anon struct {
      Something float32
      Else      []byte
    }
  }

Declaring and initializing struct variables

  ms := MyStruct{
    Name: "Pieter Droogendijk",
    Age:  32,
  }

Accessing fields

  ms.Name = "Pieter Droogendijk" // Doesn't matter if ms is MyStruct or *MyStruct

* Slices

Slice values are triplets; pointer, length, capacity

  slice1 := make([]int, 5)
  slice2 := []string{
    "string1",
    "string2",
  }
  slice3 := make([]float32, 8, 128)
  var sliceEmpty []bool = nil

Length (and Capacity) can be queried

  for i := 0; i < len(slice3); i++ {
    something(slice3[i])
  }

Indexing and slicing

  str := "Oh, hello, world!"
  chr := str[2]    // ','
  hw  := str[0:2]  // "Oh"
  hw   = str[4:17] // "hello, world!"

* Slices (cont.)

Appending

  oldSlice := []byte("Hello, world")
  newSlice := append(oldSlice, '!', '!', '!')

Append a slice to another slice

  oldSlice = []int{0,1,2,3}
  addSlice = []int{9,8,7,6}
  newSlice = append(oldSlice, addSlice...) // [0,1,2,3,9,8,7,6]

String concatenation

  str1 := "Hello"
  str2 := "world"
  return str1 + ", " + str2

* Interfaces

  import (
    "os"
    "io/ioutil"
  )

  type Thing {
    Read([]byte) (int, error)
    Close() error
  }

  func NewThing(filename string) (Thing, error) {
    handle, err := os.Open(filename)
    if err != nil {
      return nil, fmt.Errorf("Error opening file: %v", err)
    }
    return handle, nil
  }
  
  func ReadThing(thing Thing) ([]byte, error) {
    return ioutil.ReadAll(thing)
  }

* Example: sort

.play sort/sort.go

* Panic, Defer and Recover

* Panic

Runtime panic

.play panic/runtime.go /START OMIT/,/END OMIT/

Voluntarily panicing

.play panic/voluntary.go /START OMIT/,/END OMIT/

* Defer

Defer a function or method call until after the function finishes.
Defers are then executed in reverse order.

.code panic/copy.go /START OMIT/,/END OMIT/

* Checking the return value within a deferred function

  func PutItThere(s string, filename string) (err error) {
    handle, err := os.Create(filename)
    if err != nil {
      return err
    }
    defer func() {
      ie := handle.Close()
      if err == nil {
        err = ie
      }
      if err != nil {
        // Try to remove the file, do not check error
        os.Remove(filename)
      }
    }()
    
    _, err = io.WriteString(handle, s)
    return err
  }

* Recover

Recover stops a panic and returns the panic value, but only works from deferred functions.

.play panic/recover.go /START OMIT/,/END OMIT/

* Changing the return value

.play panic/capture.go /START OMIT/,/END OMIT/


* Concurrency

* Goroutines

Sequential:

  func DoTheThing() {
    LongRunningThing()
    AnotherLongRunningThing()
  }

Fire-and-forget, concurrently:

  func DoTheThing() {
    go LongRunningThing()
    go AnotherLongRunningThing()
  }

But there's a problem:

  func main() {
    DoTheThing()
  }

* Channels

Declaring and creating channels

  ch := make(chan string)
  var recvOnly <-chan string = ch
  var sendOnly chan<- string = ch

Sending

  sendOnly <- "Hello!"

Receiving

  str := <-recvOnly

Closing

  close(sendOnly)

Share by communicating, don't communicate by sharing.

* Select

Ready multiple channel operations, but only one may finish.

  select {
    case request := <-requestChan:
      handleRequest(request)
    case <-killChan:
      return
    case senderChan <-something
      log.Printf("I sent a thing")
    case <-stopSendingSignal:
      senderChan = nil
  }

* Example: Get things sequentially

.play chan/sequential.go /START OMIT/,/END OMIT/

* Example: Get things concurrently

.play chan/chanonly.go /START OMIT/,/END OMIT/

But what if we don't want to wait forever?

* Example: Get things concurrently, with timeout

.play chan/after.go /START OMIT/,/END OMIT/

* Example: Get things concurrently, with timeout, and cleanup

.play chan/clean.go /START OMIT/,/END OMIT/

* Example: Get things concurrently, with timeout, cleanup and wait

.play chan/fullclean.go /START OMIT/,/END OMIT/
