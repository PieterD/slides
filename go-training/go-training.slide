The Go Programming Language
A modern systems language
20:17 11 Feb 2015

Pieter Droogendijk
Developer, CRI
pieter@binky.org.uk


* Language history & overview

* A little bit of history

Started in 2007 as a 20% project at Google:

- Ken Thompson (B, Unix, Plan 9, Regular Expressions, Ed, UTF-8)
- Rob Pike (Plan 9, Acme, Blit, Sam, UTF-8)
- Robert Griesemer

Joined in 2008:

- Ian Lance Taylor (Binutils, GCC)
- Russ Cox (Plan 9)

Open Sourced in November 10, 2009

- Andrew Gerrand
- Brad Fitzpatrick (Livejournal, memcached, OpenID, Camlistore)

Go 1.0 in March 2012


* The First Commits

7d7c6a9 - (43 years ago) hello, world - Brian Kernighan
0bb0b61 - (41 years ago) convert to C - Brian Kernighan
0744ac9 - (27 years ago) convert to Draft-Proposed ANSI C - Brian Kernighan
d82b11e - (27 years ago) last-minute fix: convert to ANSI C - Brian Kernighan
18c5b48 - (7 years ago) Go spec starting point. - Robert Griesemer
 

* Features (buzz-word bingo)

- Compiled (i386, x64, Arm) (Linux, OS X, FreeBSD, Windows, NaCl)
- Very simple type system, strong & static
- Memory-safe
- Garbage collected
- Concurrent
- Closures
- High-quality standard library
- Full run-time reflection
- Simple build system
- Excellent tools
- Compiles very fast
- Built-in testing


* Not Features (buzz-word bingo 2: electric boogaloo)

- Generics
- Parametric polymorphism
- Operator overloading
- Function overloading
- Exceptions
- Inheritance


* Where it's being used

- Google (App Engine, Kubernetes, download server)
- DotCloud (Docker, Packer)
- Heroku (Doozer)
- CoreOS (Etcd, Raft)
- Bol.com, Iron.io, Bit.ly, Canonical, CloudFlare, Dropbox, Getty, Github, pool.ntp.org, Tumblr, Soundcloud, Twitch, Zynga Apcera, MongoDB, Wercker, Github Large File Storage

https://github.com/golang/go/wiki/GoUsers


* So what's it for?

What it does well:

- Paas & Iaas
- Servers
- Tools
- Web
- Big software

What it doesn't do so well:

- Scientific programming
- Real-time programming
- Operating systems
- Graphical user interface


* Hello world, and the development environment

* Hello, world!

.play hello_world/hello.go
.code reverse/reverse.go

* The workspace, GOROOT & GOPATH

Global configuration:

  export GOROOT=$HOME/go
  export GOPATH=$HOME/git/go
  export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

Get example project:

  go get github.com/PieterD/slides/go-training/hello_world

Directory structure:

  src/
    github.com/PieterD/slides/go-training/hello_world/
      hello.go
    github.com/PieterD/slides/go-training/reverse/
      reverse.go
  bin/
    hello_world
  pkg/
    darwin_amd64/github.com/PieterD/slides/go-training/hello-world
      reverse.a

* The go tool

Fetch, compile and install a program or library recursively

  go get <url>

Build a project

  go build

Run all tests

  go test

Lint-like static code analysis

  go vet

Format code into the standard shape

  go fmt

* And much more

Run all code generation

  go generate

Automated code manipulation

  go fix

Available tools

  go tool

Help on the go tool

  go help

Code coverage report

  go test -coverprofile=something.cover && go tool cover -html=something.cover

* Basic Syntax

* Types and values

Declaration & initialization

  var zero int64
  var a int = 5
  var b, c int = 6, 7
  var d = 8
  e := 9
  var f, g, h = 0.5, 3, "hello"
