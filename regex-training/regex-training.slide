Regular Expressions
The swiss army knife of text processing
18:00 01 Apr 2015

Pieter Droogendijk
Developer, CRI
pieter@binky.org.uk

* Welcome!

Can everybody read this?

Follow along:

.link https://github.com/PieterD/slides https://github.com/PieterD/slides

Playing with regular expressions:

.link https://regex101.com/ https://regex101.com/

Python is best; no delimiter.

Modifiers:

  g    Global:    all matches, not just one.
  m    Multiline: ^ and $ match beginning and start of line.
  x    eXtended:  don't match spaces, allow comments

* Overview & History

* Regular Expressions: what are they?

  ( ( ( [^"/#]+
        ( " ( [^\\"]+ ( [\\] . )? )+ "
        | [/][^/*]
        | [#] ( $ | [^i] | i[^f] | if[^ ] | if[ ][^0] | if[ ]0[^\n] )
        )?
      )+
    )
  )
  ( ^[#]if[ ]0\n
    ( ( $
      | [^#]
      | [#] ( [^e] | e[^n] | en[^d] | end[^i] | endi[^f] | endif[^\n] )
      )
      [^\n]*\n
    )+
    ^[#]endif$\n?
  | /
    ( /.*$
    | [*]
      ( [^*]+ [*] [^/] )+
      [^*]+ [*] [/]
    )
  )?

* Some history

- Stephen Cole Kleene (1957): Mathematical framework, Regular Sets
- SNOBOL4 (1967)
- Ken Thompson (1968): QED
- Bell Labs (1970): ed, sed, awk, vi, emacs
- Henry Spencer (1986): Perl, Tcl, PostgreSQL
- POSIX.2 (1992)
- Philip Hazel (1997): PCRE (PHP, Apache http)
- Russ Cox (2010): RE2 (Google)
- Eclipse, notepad++, IntelliJ, every programming language.
- Many flavours of regex, many implementations.

* Minimal Extended Regex Syntax

* Atoms, Concatenation, Alternation, Grouping

Basic text matches as basic text

  abc                    abc

Dot matches as any character

  ab.                    aba, abb, abc, abd, abQ, ab0, ab!, ...

Escape special characters . * + ? ( { |

  abc\.                  abc.

Alternation

  abc|xyz                abc, xyz

Grouping

  hello (world|kids)     hello world, hello kids
  
* Bracket expressions

Bracket expression matches any included character

  ab[cde]                abc, abd, abe

Inverted bracked expression matches any character not included

  [^abcde]bc             fbc, gbc, hbc, !bc, Qbc, ...
                     NOT abc, bbc, cbc, dbc, ebc

Character classes

  abc[[:lower:]]         abca, abcb, abcc, abcd, ...
                     NOT abcA, abcB, abcC, abcD, ...
  [[:upper:]]            A, B, C, D, E, F, G, H, ...
                     NOT a, b, c, d, e, f, g, h, ...

Range

  [a-z]                  Only a through z, lowercase.
  [abcdef0-9]            a, b, c, d, e, f, or 0 through 9.
  [abc012-]              a, b, c, 0, 1, 2, -

* Qualifiers

Kleene Star: 0 or more

  ab*c                   ac, abc, abbc, abbbc, abbbbc, ...
  abc(xyz)*              abc, abcxyz, abcxyzxyz, ...

Plus: 1 or more

  ab+c                   abc, abbc, abbbc, abbbbc, ...
  a(bc)+                 abc, abcbc, abcbcbc, ...

Questionmark: 0 or 1

  ab?c                   ac, abc
  a(bc|xy)?              a, abc, axy
  hello( (world|kids))?  hello, hello world, hello kids

Interval expression: range

  ab{2}c                 abbc
  ab{2,4}c               abbc, abbbc, abbbbc
  ab{3,}c                abbbc, abbbbc, abbbbbc, ...

* Anchors

Non-matching elements.

Start of string:

  ^abc                   abc, NOT xabc
  ^[0-9]                 Find string that starts with a number

End of string:

  abc$                   abc, NOT abcx
  [0-9]$                 Find string that ends with a number

Empty line:

  ^$

Don't consume character, depending on implementation.

  $\n^                   Match newline, in multiline mode

* Greedy Matching

Try to start as far to the left as possible

  a+|b+ or b+|a+      xxxaaaaabbbbbbbb
                         ^^^^^
  a*                  ^

Try to match as much as possible while maintaining match

  [ab]+b              aaaaaaaabaabaaa
                      ^^^^^^^^^^^^

Match alternation in order

  x|xx|xxx            xxxxxx
                      ^
  xxx|xx|x            ^^^

* Extra features and worst-case scenarios

Non-greedy operators: ??, *?, +?

Backtracking

  ([a-z]+) ([a-z]+) \2 \1

Pathalogical expressions

  (.*a){20}
  (a?){15}a{15}

* Truly Minimal Syntax

Cut out the syntactic sugar:

  x{4}                   xxxx
  x{3,}                  xxxx*
  x{2,5}                 xx(x(x(x)?)?)?
  x?                     (x|)
  x+                     xx*
  [xyz]                  (x|y|z)
  .                      (a|b|c|d|e) ...

What remains:

  x                      Character match
  x*                     Kleene Star Repetition
  xy                     Concatenation
  x|y                    Alternation
  x(y|z)                 Grouping

Definitions:

  Concatenation   if expr A matches string X and expr B matches string Y, expr AB matches string XY.
  Alternation     if expr A matches string X and expr B matches string Y, expr A|B matches X or Y.

* Substitution

When substituting, subgroups are available

  ^([0-9]+) ([0-9]+)$    a=\2 b=\1
  123 987                a=987 b=123

  ^[:blank:]*(.*)$       \1
  __hello world!         hello world!

  [0-9]                       (g modifier)
  abcd1e2f3g             abcdefg

Subgroups are counted by opening parens, unreached groups remain empty

  (abc (def) (ghi) ((jkl)|mno(pqr)))
  1    2     3     45        6

Last match from subgroup is available

  (([a-z]+) ?)+          \2
  aap noot mies_         mies

* Let's Dance

* Quick Reference: Features

Atoms

  .             any character at all
  [xyz]         x, y or z
  [^xyz]        any character, but not x, y or z

Qualifiers

  ?             0 or 1
  *             0 or more
  +             1 or more
  {n,m}         between n and m inclusive

Compositors

  xy            standard concatenation
  x|y           alternation (x or y)

Anchors

  ^             start of string
  $             end of string

* Quick Reference: Precedence and Character classes

Precedence

  \x            escaped character
  []            bracket expression
  ()            grouping
  * + ? {n,m}   qualifier
                concatenation
  ^ $           anchoring
  |             alternation

Character classes

  [[:ascii:]]   Any ascii character
  [[:alpha:]]   Upper or lowercase alphanumeric characters
  [[:digit:]]   Numeric digit
  [[:xdigit:]]  Hex digit; [[:digit:]] or [a-f] or [A-F]
  [[:alnum:]]   [[:alpha:]] or [[:digit:]]
  [[:word:]]    [[:alnum:]] or _
  [[:cntrl:]]   Control character
  [[:blank:]]   Space or tab
  [[:space:]]   Any whitespace
  [[:graph:]]   All printable characters
  [[:lower:]]   Lowercase alpha
  [[:upper:]]   Uppercase alpha
  



