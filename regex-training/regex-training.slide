Regular Expressions
The swiss army knife of text processing
18:00 01 Apr 2015

Pieter Droogendijk
Developer, CRI
pieter@binky.org.uk


* Overview & History

* Regular Expressions: what are they?

  ( ( ( [^"/#]+
        ( " ( [^\\"]+ ( [\\] . )? )+ "
        | [/][^/*]
        | [#] ( $ | [^i] | i[^f] | if[^ ] | if[ ][^0] | if[ ]0[^\n] )
        )?
      )+
    )
  )
  ( ^[#]if[ ]0\n
    ( ( $
      | [^#]
      | [#] ( [^e] | e[^n] | en[^d] | end[^i] | endi[^f] | endif[^\n] )
      )
      [^\n]*\n
    )+
    ^[#]endif$\n?
  | /
    ( /.*$
    | [*]
      ( [^*]+ [*] [^/] )+
      [^*]+ [*] [/]
    )
  )?

* Some history

- Stephen Cole Kleene (1957): Mathematical framework, Regular Sets
- SNOBOL4 (1967)
- Ken Thompson (1968): QED
- Bell Labs (1970): ed, sed, awk, vi, emacs
- Henry Spencer (1986): Perl, Tcl, PostgreSQL
- POSIX.2 (1992)
- Philip Hazel (1997): PCRE (PHP, Apache http)
- Russ Cox (2010): RE2 (Google)
- Eclipse, notepad++, IntelliJ, every programming language.
- Many flavours of regex, many implementations.

* Minimal Extended Regex Syntax

* Playing around with regular expressions

.link https://regex101.com/ https://regex101.com

Python is best; no delimiter.

Modifiers:

  g    Global:    all matches, not just one.
  m    Multiline: ^ and $ match beginning and start of line.
  x    eXtended:  don't match spaces, allow comments

* Atoms and Concatenation

Basic text matches as basic text

  abc                 abc

Dot matches as any character

  ab.                 aba, abb, abc, abd, abQ, ab0, ab!, ...

Escape special characters

  abc\.               abc.

Special characters: | . \ { ( ? * + ^ $

* Atoms and Concatenation: Bracket expressions

Bracket expression matches any included character

  ab[cde]             abc, abd, abe

Inverted bracked expression matches any character not included

  [^abcde]bc          fbc, gbc, hbc, !bc, Qbc, ...
                  NOT abc, bbc, cbc, dbc, ebc

Character classes

  abc[[:lower:]]      abca, abcb, abcc, abcd, ...
                  NOT abcA, abcB, abcC, abcD, ...
  [[:upper:]]         A, B, C, D, E, F, G, H, ...
                  NOT a, b, c, d, e, f, g, h, ...

Range

  [a-z]               Only a through z, lowercase.
  [abcdef0-9]         a, b, c, d, e, f, or 0 through 9.
  [abc012-]           a, b, c, 0, 1, 2, -

* Atoms and Concatenation: Qualifiers

Kleene Star: 0 or more

  ab*c                ac, abc, abbc, abbbc, abbbbc, ...

Plus: 1 or more

  ab+c                abc, abbc, abbbc, abbbbc, ...

Questionmark: 0 or 1

  ab?c               ac, abc

Interval expression: range

  ab{2}c              abbc
  ab{2,4}c            abbc, abbbc, abbbbc
  ab{3,}c             abbbc, abbbbc, abbbbbc, ...

* Quick Reference: Features

Atoms

  .             any character at all
  [xyz]         x, y or z
  [^xyz]        any character, but not x, y or z

Qualifiers

  ?             0 or 1
  *             0 or more
  +             1 or more
  {n,m}         between n and m inclusive

Compositors

  xy            standard concatenation
  x|y           x or y

Anchors

  ^             start of string
  $             end of string

* Quick Reference: Precedence and Character classes

Precedence

  \x            escaped character
  []            bracket expression
  ()            grouping
  * + ? {n,m}   qualifier
                concatenation
  ^ $           anchoring
  |             alternation

Character classes

  [[:ascii:]]   Any ascii character
  [[:alpha:]]   Upper or lowercase alphanumeric characters
  [[:digit:]]   Numeric digit
  [[:xdigit:]]  Hex digit; [[:digit:]] or [a-f] or [A-F]
  [[:alnum:]]   [[:alpha:]] or [[:digit:]]
  [[:word:]]    [[:alnum:]] or _
  [[:cntrl:]]   Control character
  [[:blank:]]   Space or tab
  [[:space:]]   Any whitespace
  [[:graph:]]   All printable characters
  [[:lower:]]   Lowercase alpha
  [[:upper:]]   Uppercase alpha
  



